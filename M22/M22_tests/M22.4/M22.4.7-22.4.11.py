"""
Задание 22.4.7
Задание на самопроверку.

Напишите функцию size, которая возвращает текущий размер очереди.
Учтите, что необходимо рассмотреть несколько случаев: когда очередь пустая,
когда очередь полная (какому условию соответствует?), а также отдельное внимание стоит обратить на тот случай,
когда хвост очереди переместился в начало списка (закольцевался).
"""
def size(): # получаем размер очереди
    if is_empty(): # если она пуста
        return 0 # возвращаем ноль
    elif head == tail: # иначе, если очередь не пуста, но указатели совпадают
        return N_max # значит очередь заполнена
    elif head > tail: # если хвост очереди сместился в начало списка
        return N_max - head + tail
    else: # или если хвост стоит правее начала
        return tail - head

"""
Задание 22.4.8
Задание на самопроверку.

Напишите функцию add, которая добавляет задачу в конец очереди. Также учтите, что размер массива ограничен, 
и при достижении этого предела необходимо перенести указатель в положение 0. 
Также обратите внимание на области видимости переменных tail и order. После добавления задачи в очередь, 
она должна вывести уведомление об этом в формате:
"Задача №1 добавлена"
"""


def add():  # добавляем задачу в очередь
    global tail, order
    order += 1  # увеличиваем порядковый номер задачи
    queue[tail] = order  # добавляем его в очередь
    print("Задача №%d добавлена" % (queue[tail]))

    # увеличиваем указатель на 1 по модулю максимального числа элементов
    # для зацикливания очереди в списке
    tail = (tail + 1) % N_max

"""Задание 22.4.9
Задание на самопроверку.

Напишите функцию, печатающую информацию о приоритетной задаче в формате:

"Задача №1 в приоритете"
"""

def show(): # выводим приоритетную задачу
    print("Задача №%d в приоритете" % (queue[head]))

"""
Задание 22.4.10
Задание на самопроверку.

Напишите функцию, которая печатает в консоль задачу (=выполняет её) и, соответственно, удаляет её из очереди, присваивая ей значение 0. Формат вывода:

"Задача №1 выполнена"
"""

def do(): # выполняем приоритетную задачу
    global head
    print("Задача №%d выполнена" % (queue[head]))
    queue[head] = 0 # после выполнения зануляем элемент по указателю
    head = (head + 1) % N_max # и циклично перемещаем указатель

